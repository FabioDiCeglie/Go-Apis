package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/fabio/graphql/database"
	"github.com/fabio/graphql/graph/model"
	"github.com/fabio/graphql/pkg/jwt"
	"github.com/jinzhu/gorm"
)

// CreateLink is the resolver for the createLink field.
func (r *mutationResolver) CreateLink(ctx context.Context, input model.NewLink) (*model.Link, error) {
	db := database.Db

	// Create a new link
	link := &model.Link{
		Address: input.Address,
		Title:   input.Title,
	}

	// // Get the user from the database
	// var user model.User
	// if err := db.First(&user).Error; err != nil {
	// 	return nil, err
	// }

	// // Associate the user with the link
	// link.User = &user

	// Save the link to the database
	if err := db.Create(&link).Error; err != nil {
		return nil, err
	}

	return link, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (string, error) {
	db := database.Db

	hashedPassword, err := jwt.HashPassword(input.Password)
	if err != nil {
		log.Fatal(err)
	}

	// Create a new user
	user := &model.User{
		Name:     input.Username,
		Password: hashedPassword,
	}

	// Save the user to the database
	if err := db.Create(&user).Error; err != nil {
		return "", err
	}

	token, err := jwt.GenerateToken(user.Name)
	if err != nil {
		return "", err
	}

	return token, nil
}

func (r *mutationResolver) Login(ctx context.Context, input model.Login) (string, error) {
	db := database.Db

	var foundUser model.User
	if err := db.Where("Username = ?", input.Username).First(&foundUser).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			// 1: Change the return statement to return an error instead of an empty string
			return "", errors.New("wrong username or password")
		} else {
			// 2: Instead of using log.Fatal, return the error to the caller
			return "", err
		}
	}

	correct := jwt.CheckPasswordHash(input.Password, foundUser.Password)
	if !correct {
		return "", errors.New("wrong username or password")
	}

	token, err := jwt.GenerateToken(foundUser.Name)
	if err != nil {
		return "", err
	}

	return token, nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (string, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// Links is the resolver for the links field.
func (r *queryResolver) Links(ctx context.Context) ([]*model.Link, error) {
	db := database.Db
	var links []*model.Link
	db.Find(&links)
	return links, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
